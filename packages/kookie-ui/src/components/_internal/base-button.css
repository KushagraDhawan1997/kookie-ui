/**
 * Base Button Component Styles
 * 
 * This file contains the foundational styling for all button components in the
 * Kookie User Interface design system. It provides the base styles that are
 * extended by Button, IconButton, and other button variants.
 * 
 * Key features:
 * - Comprehensive accessibility support (forced colors, reduced motion)
 * - Six visual variants with distinct styling patterns
 * - Material system for solid and translucent effects
 * - Responsive sizing with mobile-first approach
 * - RTL (right-to-left) language support
 * - Interactive states (hover, focus, active, disabled)
 * - Loading states with proper visual feedback
 * - High contrast mode support
 * 
 * The base button uses CSS custom properties extensively to enable
 * dynamic theming and responsive behavior across different contexts.
 */

/* 
 * Base button foundation styles
 * These styles establish the core button behavior and appearance
 */
.rt-BaseButton {
  /* Reset all inherited styles to ensure consistent base */
  all: unset;
  box-sizing: border-box;

  /* Flexbox layout for content alignment */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;

  /* Interaction and accessibility */
  user-select: none;
  position: relative;
  cursor: pointer;
  contain: paint;
  gap: var(--base-button-gap);
  transition: var(--transition-button);

  /* Typography */
  font-family: var(--default-font-family);
  font-style: normal;
  text-align: center;

  /* RTL support for right-to-left languages */
  :where([dir='rtl']) & {
    flex-direction: row-reverse;
  }

  /* 
   * Theme-level translucent override
   * Applies backdrop filter for elevated visual effects
   */
  :where([data-panel-background='translucent'], [data-material='translucent']) & {
    backdrop-filter: var(--backdrop-filter-components);
    --backdrop-filter-components: blur(var(--backdrop-blur-components));
  }

  /* Prevent backdrop-filter stacking with parent elements */
  isolation: isolate;

  /* 
   * Component-level material overrides
   * These ensure proper rendering based on material setting
   */
  &:where([data-panel-background='solid'], [data-material='solid']) {
    backdrop-filter: none;
    --backdrop-filter-components: none;
  }

  &:where([data-panel-background='translucent'], [data-material='translucent']) {
    backdrop-filter: var(--backdrop-filter-components);
    --backdrop-filter-components: blur(var(--backdrop-blur-components));
  }

  /* 
   * Forced colors support for high contrast mode
   * Ensures buttons remain visible in Windows high contrast mode
   */
  @media (forced-colors: active) {
    border: 1px solid CanvasText;
    color: CanvasText;
    background-color: Canvas;
  }

  /* 
   * Disabled state styling
   * Prevents interaction and provides visual feedback
   */
  &:where([data-disabled]) {
    --spinner-opacity: 1;
    cursor: not-allowed;
    pointer-events: none;
    @media (forced-colors: active) {
      border-color: GrayText;
      color: GrayText;
      background-color: Canvas;
    }
  }

  /* 
   * Loading state styling
   * Changes cursor to indicate processing state
   */
  &:where(.rt-loading) {
    position: relative;
    cursor: wait;
  }

  /* 
   * Reduced motion support
   * Respects user's motion preferences for accessibility
   */
  @media (prefers-reduced-motion: reduce) {
    transition: none;
    backdrop-filter: none;
    animation: none;
  }

  /* Set height using CSS custom property for responsive sizing */
  height: var(--base-button-height);
}

/* 
 * Full width mode
 * Expands button to fill its container width
 */
.rt-BaseButton:where(.rt-full-width) {
  display: flex;
  width: 100%;
}

/***************************************************************************************************
 *                                                                                                 *
 * SIZES                                                                                           *
 *                                                                                                 *
 * Button sizes are defined using CSS custom properties for responsive design.
 * Each size sets the height and border radius appropriate for the scale.
 *                                                                                                 *
 ***************************************************************************************************/

@breakpoints {
  .rt-BaseButton {
    /* 
     * Size 1: Compact (24px height)
     * Designed for toolbars and dense interfaces
     */
    &:where(.rt-r-size-1) {
      --base-button-height: var(--space-5);
      border-radius: max(var(--radius-1), var(--radius-full));
    }

    /* 
     * Size 2: Standard (32px height)
     * Default size for most interface contexts
     */
    &:where(.rt-r-size-2) {
      --base-button-height: var(--space-6);
      border-radius: max(var(--radius-2), var(--radius-full));
    }

    &:where(.rt-r-size-3) {
      --base-button-height: var(--space-7);
      border-radius: max(var(--radius-3), var(--radius-full));
    }

    &:where(.rt-r-size-4) {
      --base-button-height: var(--space-8);
      border-radius: max(var(--radius-4), var(--radius-full));
    }
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * VARIANTS                                                                                        *
 *                                                                                                 *
 ***************************************************************************************************/

/* classic */

.rt-BaseButton:where(.rt-variant-classic) {
  position: relative;
  color: var(--accent-a11);
  background-color: var(--color-surface-solid);
  box-shadow: var(--shadow-2);
  transition: var(--transition-text-field);

  /* Theme-level translucent override */
  :where([data-panel-background='translucent'], [data-material='translucent']) & {
    background-color: var(--color-surface-translucent);
  }

  /* Component-level overrides (higher specificity) */
  &:where([data-panel-background='solid'], [data-material='solid']) {
    background-color: var(--color-surface-solid);
  }

  &:where([data-panel-background='translucent'], [data-material='translucent']) {
    background-color: var(--color-surface-translucent);
  }

  /* Dark mode uses same styling as light mode for simplicity */

  &:where(.rt-high-contrast) {
    color: var(--gray-12);
    background-color: var(--color-surface-solid);

    /* Theme-level translucent override for high contrast */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: var(--color-surface-translucent);
    }

    /* Component-level overrides for high contrast */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--color-surface-solid);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: var(--color-surface-translucent);
    }
  }

  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: 2px;
  }

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--gray-2);
      box-shadow: var(--shadow-2);

      /* Theme-level translucent override for hover */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--gray-a2), var(--gray-2) 60%);
      }

      /* Component-level overrides for hover */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--gray-2);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--gray-a2), var(--gray-2) 60%);
      }

      /* Dark mode uses same styling as light mode for simplicity */
    }
  }

  &:where([data-state='open']) {
    background-color: var(--gray-3);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for open */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--gray-a3), var(--gray-3) 60%);
    }

    /* Component-level overrides for open */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--gray-3);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--gray-a3), var(--gray-3) 60%);
    }

    /* Dark mode uses same styling as light mode for simplicity */
  }

  &:where(
      :active:not([data-state='open'], [data-disabled]),
      [data-state='on']:not([data-disabled])
    ) {
    background-color: var(--gray-3);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for active */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--gray-a3), var(--gray-3) 60%);
    }

    /* Component-level overrides for active */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--gray-3);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--gray-a3), var(--gray-3) 60%);
    }
  }

  @media (pointer: coarse) {
    &:where(:active:not([data-state='open'])) {
      outline: var(--classic-shadow-blur-large) solid var(--gray-a4);
      outline-offset: 0;
    }
  }

  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
    box-shadow: none;
    outline: none;
    cursor: not-allowed;
    pointer-events: none;
    top: 0;
  }
}

/* override */

.rt-BaseButton:where(.rt-variant-override) {
  /* Base styles driven entirely by CSS variables, set via props */
  color: var(--button-override-color, inherit);
  background: var(--button-override-background, transparent);
  background-color: var(--button-override-background-color, initial);
  box-shadow: var(--button-override-box-shadow, none);
  filter: var(--button-override-filter, none);
  outline: var(--button-override-outline, none);

  @media (hover: hover) {
    &:where(:hover) {
      color: var(--button-override-hover-color, var(--button-override-color, inherit));
      background: var(
        --button-override-hover-background,
        var(--button-override-background, transparent)
      );
      background-color: var(
        --button-override-hover-background-color,
        var(--button-override-background-color, initial)
      );
      box-shadow: var(--button-override-hover-box-shadow, var(--button-override-box-shadow, none));
      filter: var(--button-override-hover-filter, var(--button-override-filter, none));
      outline: var(--button-override-hover-outline, var(--button-override-outline, none));
    }
  }

  &:where([data-state='open']) {
    color: var(--button-override-open-color, var(--button-override-color, inherit));
    background: var(
      --button-override-open-background,
      var(--button-override-background, transparent)
    );
    background-color: var(
      --button-override-open-background-color,
      var(--button-override-background-color, initial)
    );
    box-shadow: var(--button-override-open-box-shadow, var(--button-override-box-shadow, none));
    filter: var(--button-override-open-filter, var(--button-override-filter, none));
    outline: var(--button-override-open-outline, var(--button-override-outline, none));
  }

  &:where(:active:not([data-state='open'])) {
    color: var(--button-override-active-color, var(--button-override-color, inherit));
    background: var(
      --button-override-active-background,
      var(--button-override-background, transparent)
    );
    background-color: var(
      --button-override-active-background-color,
      var(--button-override-background-color, initial)
    );
    box-shadow: var(--button-override-active-box-shadow, var(--button-override-box-shadow, none));
    filter: var(--button-override-active-filter, var(--button-override-filter, none));
    outline: var(--button-override-active-outline, var(--button-override-outline, none));
  }

  &:where(:focus-visible) {
    outline: var(--button-override-focus-outline, var(--focus-ring, 2px solid var(--focus-8)));
    outline-offset: var(--button-override-focus-outline-offset, 2px);
  }

  /* Toggle pressed */
  &:where([data-state='on']) {
    color: var(
      --button-override-pressed-color,
      var(--button-override-active-color, var(--button-override-color, inherit))
    );
    background: var(
      --button-override-pressed-background,
      var(--button-override-active-background, var(--button-override-background, transparent))
    );
    background-color: var(
      --button-override-pressed-background-color,
      var(
        --button-override-active-background-color,
        var(--button-override-background-color, initial)
      )
    );
    box-shadow: var(
      --button-override-pressed-box-shadow,
      var(--button-override-active-box-shadow, var(--button-override-box-shadow, none))
    );
    filter: var(
      --button-override-pressed-filter,
      var(--button-override-active-filter, var(--button-override-filter, none))
    );
    outline: var(
      --button-override-pressed-outline,
      var(--button-override-active-outline, var(--button-override-outline, none))
    );
  }

  &:where([data-disabled]) {
    color: var(--button-override-disabled-color, var(--gray-a8));
    background: var(--button-override-disabled-background, var(--gray-a3));
    background-color: var(--button-override-disabled-background-color, var(--gray-a3));
    box-shadow: var(--button-override-disabled-box-shadow, none);
    filter: var(--button-override-disabled-filter, none);
    outline: var(--button-override-disabled-outline, none);
    cursor: not-allowed;
    pointer-events: none;
  }
}

/* solid */

:where(.radix-themes) {
  --base-button-solid-high-contrast-hover-filter: contrast(0.88) saturate(1.1) brightness(1.1);
  --base-button-solid-active-filter: brightness(0.9) contrast(1.03);
  --base-button-solid-open-filter: brightness(0.96) contrast(1.02);
  --base-button-solid-high-contrast-active-filter: brightness(0.92);
  --base-button-solid-high-contrast-open-filter: brightness(0.96);
}
:is(.dark, .dark-theme),
:is(.dark, .dark-theme) :where(.radix-themes:not(.light, .light-theme)) {
  --base-button-solid-high-contrast-hover-filter: contrast(0.88) saturate(1.3) brightness(1.18);
  --base-button-solid-active-filter: brightness(0.88) contrast(1.03);
  --base-button-solid-open-filter: brightness(0.95) contrast(1.02);
  --base-button-solid-high-contrast-active-filter: brightness(0.9);
  --base-button-solid-high-contrast-open-filter: brightness(0.95);
}

.rt-BaseButton:where(.rt-variant-solid) {
  /* Base state: solid color for solid panels */
  background-color: var(--accent-9);
  color: var(--accent-contrast);

  /* Theme-level translucent override */
  :where([data-panel-background='translucent'], [data-material='translucent']) & {
    background-color: color-mix(in srgb, var(--accent-a9), var(--accent-9) 10%);
  }

  /* Component-level overrides (higher specificity) */
  &:where([data-panel-background='solid'], [data-material='solid']) {
    background-color: var(--accent-9);
  }

  &:where([data-panel-background='translucent'], [data-material='translucent']) {
    background-color: color-mix(in srgb, var(--accent-a9), var(--accent-9) 10%);
  }

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-10);
      box-shadow: var(--shadow-2);

      /* Theme-level translucent override for hover */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--accent-a10), var(--accent-10) 10%);
      }

      /* Component-level overrides for hover */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--accent-10);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--accent-a10), var(--accent-10) 10%);
      }
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-10);
    filter: var(--base-button-solid-open-filter);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for open */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a10), var(--accent-10) 10%);
    }

    /* Component-level overrides for open */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-10);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a10), var(--accent-10) 10%);
    }
  }
  &:where(:active:not([data-state='open'])) {
    filter: var(--base-button-solid-active-filter);
    box-shadow: var(--shadow-1);
  }
  /* Better -webkit-tap-highlight-color */
  @media (pointer: coarse) {
    &:where(:active:not([data-state='open'])) {
      outline: var(--classic-shadow-blur-large) solid var(--accent-a4);
      outline-offset: 0;
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: 2px;
  }
  &:where(.rt-high-contrast) {
    background-color: var(--accent-12);
    color: var(--gray-1);

    /* Theme-level translucent override for high contrast */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a12), var(--accent-12) 10%);
    }

    /* Component-level overrides for high contrast */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-12);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a12), var(--accent-12) 10%);
    }

    @media (hover: hover) {
      &:where(:hover) {
        background-color: var(--accent-12);
        filter: var(--base-button-solid-high-contrast-hover-filter);
        box-shadow: var(--shadow-2);

        /* Theme-level translucent override for high contrast hover */
        :where([data-panel-background='translucent'], [data-material='translucent']) & {
          background-color: color-mix(in srgb, var(--accent-a12), var(--accent-12) 10%);
        }

        /* Component-level overrides for high contrast hover */
        &:where([data-panel-background='solid'], [data-material='solid']) {
          background-color: var(--accent-12);
        }

        &:where([data-panel-background='translucent'], [data-material='translucent']) {
          background-color: color-mix(in srgb, var(--accent-a12), var(--accent-12) 10%);
        }
      }
    }
    &:where([data-state='open']) {
      background-color: var(--accent-12);
      filter: var(--base-button-solid-high-contrast-open-filter);
      box-shadow: var(--shadow-1);

      /* Theme-level translucent override for high contrast open */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--accent-a12), var(--accent-12) 10%);
      }

      /* Component-level overrides for high contrast open */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--accent-12);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--accent-a12), var(--accent-12) 10%);
      }
    }
    &:where(:active:not([data-state='open'])) {
      filter: var(--base-button-solid-high-contrast-active-filter);
      box-shadow: var(--shadow-1);
    }
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
    outline: none;
    filter: none;
    cursor: not-allowed;
    pointer-events: none;
  }
}

/* soft / ghost */

.rt-BaseButton:where(.rt-variant-soft, .rt-variant-ghost) {
  color: var(--accent-a11);

  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
    cursor: not-allowed;
    pointer-events: none;
  }
}

.rt-BaseButton:where(.rt-variant-soft) {
  /* Base state: solid color for solid panels */
  background-color: var(--accent-3);

  /* Theme-level translucent override */
  :where([data-panel-background='translucent'], [data-material='translucent']) & {
    background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
  }

  /* Component-level overrides (higher specificity) */
  &:where([data-panel-background='solid'], [data-material='solid']) {
    background-color: var(--accent-3);
  }

  &:where([data-panel-background='translucent'], [data-material='translucent']) {
    background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
  }

  &:where(:focus-visible) {
    outline: 2px solid var(--accent-8);
    outline-offset: -1px;
  }
  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-4);
      box-shadow: var(--shadow-2);

      /* Theme-level translucent override for hover */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
      }

      /* Component-level overrides for hover */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--accent-4);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
      }
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-4);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for open */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
    }

    /* Component-level overrides for open */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-4);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
    }
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-5);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for active */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a5), var(--accent-5) 60%);
    }

    /* Component-level overrides for active */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-5);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a5), var(--accent-5) 60%);
    }
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: var(--gray-a3);
    cursor: not-allowed;
    pointer-events: none;
  }
}

.rt-BaseButton:where(.rt-variant-ghost) {
  &:where([data-flush='true']) {
    /* We reset the defined margin variables to avoid inheriting them from a higher component */
    /* If a margin IS defined on the component itself, the utility class will win and reset it */
    --margin-top: 0px;
    --margin-right: 0px;
    --margin-bottom: 0px;
    --margin-left: 0px;

    /* Calculate padding values for different button sizes */
    --button-padding-x: calc(var(--base-button-height) * var(--padding-ratio-horizontal) / 4);
    --button-padding-y: calc(var(--base-button-height) / 8);

    /* Define the overrides to incorporate the negative margins */
    --margin-top-override: calc(var(--margin-top) - var(--button-padding-y));
    --margin-right-override: calc(var(--margin-right) - var(--button-padding-x));
    --margin-bottom-override: calc(var(--margin-bottom) - var(--button-padding-y));
    --margin-left-override: calc(var(--margin-left) - var(--button-padding-x));

    margin-top: var(--margin-top-override);
    margin-right: var(--margin-right-override);
    margin-bottom: var(--margin-bottom-override);
    margin-left: var(--margin-left-override);

    /* Reset the overrides on direct children */
    :where(&) > * {
      --margin-top-override: initial;
      --margin-right-override: initial;
      --margin-bottom-override: initial;
      --margin-left-override: initial;
    }
  }

  @media (hover: hover) {
    &:where(:hover) {
      /* Base state: solid accent for solid panels */
      background-color: var(--accent-3);

      /* Theme-level translucent override for hover */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      }

      /* Component-level overrides for hover */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--accent-3);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      }

      /* Disable backdrop-filter when inside elements that already have backdrop-filter */
      /* :where(.rt-PopoverContent, .rt-BaseDialogContent, .rt-BaseMenuContent, .rt-DropdownMenuContent, .rt-ContextMenuContent, .rt-AlertDialogContent, .rt-HoverCardContent, .rt-TooltipContent, .rt-Card) & {
        backdrop-filter: none !important;
      } */
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
  &:where([data-state='open']) {
    /* Base state: solid accent for solid panels */
    background-color: var(--accent-3);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for open */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      backdrop-filter: var(--backdrop-filter-components);
    }

    /* Component-level overrides for open */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-3);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
    }

    /* Disable backdrop-filter when inside elements that already have backdrop-filter */
    /* :where(.rt-PopoverContent, .rt-BaseDialogContent, .rt-BaseMenuContent, .rt-DropdownMenuContent, .rt-ContextMenuContent, .rt-AlertDialogContent, .rt-HoverCardContent, .rt-TooltipContent, .rt-Card) & {
      backdrop-filter: none !important;
    } */
  }
  &:where(:active:not([data-state='open'])) {
    /* Base state: solid accent for solid panels */
    background-color: var(--accent-4);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for active */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
    }

    /* Component-level overrides for active */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-4);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
    }

    /* Disable backdrop-filter when inside elements that already have backdrop-filter */
    /* :where(.rt-PopoverContent, .rt-BaseDialogContent, .rt-BaseMenuContent, .rt-DropdownMenuContent, .rt-ContextMenuContent, .rt-AlertDialogContent, .rt-HoverCardContent, .rt-TooltipContent, .rt-Card) & {
      backdrop-filter: none !important;
    } */
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    background-color: transparent;
    cursor: not-allowed;
    pointer-events: none;
  }
}

/* outline */

.rt-BaseButton:where(.rt-variant-outline) {
  /* Base state: solid colors for solid panels */
  box-shadow: inset 0 0 0 1px var(--accent-6);
  color: var(--accent-11);
  transition: var(--transition-background-blur);

  /* Theme-level translucent override */
  :where([data-panel-background='translucent'], [data-material='translucent']) & {
    box-shadow: inset 0 0 0 1px var(--accent-a6);
    color: var(--accent-a11);
  }

  /* Component-level overrides (higher specificity) */
  &:where([data-panel-background='solid'], [data-material='solid']) {
    box-shadow: inset 0 0 0 1px var(--accent-6);
    color: var(--accent-11);
  }

  &:where([data-panel-background='translucent'], [data-material='translucent']) {
    box-shadow: inset 0 0 0 1px var(--accent-a6);
    color: var(--accent-a11);
  }

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-2);
      box-shadow: inset 0 0 0 1px var(--accent-7);

      /* Theme-level translucent override for hover */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--accent-a2), var(--accent-2) 60%);
        box-shadow: inset 0 0 0 1px var(--accent-a7);
      }

      /* Component-level overrides for hover */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--accent-2);
        box-shadow: inset 0 0 0 1px var(--accent-7);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--accent-a2), var(--accent-2) 60%);
        box-shadow: inset 0 0 0 1px var(--accent-a7);
      }
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-2);
    box-shadow:
      inset 0 0 0 1px var(--accent-7),
      var(--shadow-1);

    /* Theme-level translucent override for open */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a2), var(--accent-2) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a7);
    }

    /* Component-level overrides for open */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-2);
      box-shadow: inset 0 0 0 1px var(--accent-7);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a2), var(--accent-2) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a7);
    }
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-3);
    box-shadow:
      inset 0 0 0 1px var(--accent-8),
      var(--shadow-1);

    /* Theme-level translucent override for active */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }

    /* Component-level overrides for active */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-3);
      box-shadow: inset 0 0 0 1px var(--accent-8);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    box-shadow: inset 0 0 0 1px var(--gray-a7);
    background-color: transparent;
    cursor: not-allowed;
    pointer-events: none;
  }
}

/* surface */

.rt-BaseButton:where(.rt-variant-surface) {
  /* Base state: solid accent for solid panels */
  background-color: var(--accent-2);
  box-shadow: inset 0 0 0 1px var(--accent-6);
  color: var(--accent-a11);

  /* Theme-level translucent override */
  :where([data-panel-background='translucent'], [data-material='translucent']) & {
    background-color: color-mix(in srgb, var(--accent-a2), var(--accent-2) 60%);
    box-shadow: inset 0 0 0 1px var(--accent-a6);
    backdrop-filter: var(--backdrop-filter-components);
  }

  /* Component-level overrides (higher specificity) */
  &:where([data-panel-background='solid'], [data-material='solid']) {
    background-color: var(--accent-2);
    box-shadow: inset 0 0 0 1px var(--accent-6);
  }

  &:where([data-panel-background='translucent'], [data-material='translucent']) {
    background-color: color-mix(in srgb, var(--accent-a2), var(--accent-2) 60%);
    box-shadow: inset 0 0 0 1px var(--accent-a6);
  }

  @media (hover: hover) {
    &:where(:hover) {
      background-color: var(--accent-3);
      box-shadow: inset 0 0 0 1px var(--accent-7);

      /* Theme-level translucent override for hover */
      :where([data-panel-background='translucent'], [data-material='translucent']) & {
        background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
        box-shadow: inset 0 0 0 1px var(--accent-a7);
      }

      /* Component-level overrides for hover */
      &:where([data-panel-background='solid'], [data-material='solid']) {
        background-color: var(--accent-3);
        box-shadow: inset 0 0 0 1px var(--accent-7);
      }

      &:where([data-panel-background='translucent'], [data-material='translucent']) {
        background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
        box-shadow: inset 0 0 0 1px var(--accent-a7);
      }
    }
  }
  &:where([data-state='open']) {
    background-color: var(--accent-3);
    box-shadow:
      inset 0 0 0 1px var(--accent-8),
      var(--shadow-1);

    /* Theme-level translucent override for open */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }

    /* Component-level overrides for open */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-3);
      box-shadow: inset 0 0 0 1px var(--accent-8);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }
  }
  &:where(:active:not([data-state='open'])) {
    background-color: var(--accent-4);
    box-shadow:
      inset 0 0 0 1px var(--accent-8),
      var(--shadow-1);

    /* Theme-level translucent override for active */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }

    /* Component-level overrides for active */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-4);
      box-shadow: inset 0 0 0 1px var(--accent-8);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }
  }
  &:where(:focus-visible) {
    outline: 2px solid var(--focus-8);
    outline-offset: -1px;
  }
  &:where(.rt-high-contrast) {
    color: var(--accent-12);
  }
  &:where([data-disabled]) {
    color: var(--gray-a8);
    box-shadow: inset 0 0 0 1px var(--gray-a6);
    background-color: var(--gray-a2);
    cursor: not-allowed;
    pointer-events: none;
  }
}

/***************************************************************************************************
 *                                                                                                 *
 * TOGGLE PRESSED STATES                                                                           *
 *                                                                                                 *
 ***************************************************************************************************/

/* Toggle button pressed states for all variants */
.rt-BaseButton:where([data-state='on']) {
  /* No scale transform for toggle buttons - removed for better UX */

  /* Classic variant pressed */
  &:where(.rt-variant-classic) {
    background-color: var(--gray-3);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for pressed */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--gray-a3), var(--gray-3) 60%);
    }

    /* Component-level overrides for pressed */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--gray-3);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--gray-a3), var(--gray-3) 60%);
    }
  }

  /* Solid variant pressed */
  &:where(.rt-variant-solid) {
    background-color: var(--accent-10);
    opacity: 0.9;
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for pressed */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a10), var(--accent-10) 10%);
    }

    /* Component-level overrides for pressed */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-10);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a10), var(--accent-10) 10%);
    }

    &:where(.rt-high-contrast) {
      background-color: var(--accent-12);
      opacity: 0.85;
    }
  }

  /* Soft variant pressed */
  &:where(.rt-variant-soft) {
    background-color: var(--accent-5);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for pressed */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a5), var(--accent-5) 60%);
    }

    /* Component-level overrides for pressed */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-5);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a5), var(--accent-5) 60%);
    }
  }

  /* Ghost variant pressed */
  &:where(.rt-variant-ghost) {
    background-color: var(--accent-4);
    box-shadow: var(--shadow-1);

    /* Theme-level translucent override for pressed */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: var(--accent-a4);
    }

    /* Component-level overrides for pressed */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-4);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: var(--accent-a4);
    }
  }

  /* Outline variant pressed */
  &:where(.rt-variant-outline) {
    background-color: var(--accent-3);
    box-shadow:
      inset 0 0 0 1px var(--accent-8),
      var(--shadow-1);

    /* Theme-level translucent override for pressed */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }

    /* Component-level overrides for pressed */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-3);
      box-shadow: inset 0 0 0 1px var(--accent-8);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a3), var(--accent-3) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }
  }

  /* Surface variant pressed */
  &:where(.rt-variant-surface) {
    background-color: var(--accent-4);
    box-shadow:
      inset 0 0 0 1px var(--accent-8),
      var(--shadow-1);

    /* Theme-level translucent override for pressed */
    :where([data-panel-background='translucent'], [data-material='translucent']) & {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }

    /* Component-level overrides for pressed */
    &:where([data-panel-background='solid'], [data-material='solid']) {
      background-color: var(--accent-4);
      box-shadow: inset 0 0 0 1px var(--accent-8);
    }

    &:where([data-panel-background='translucent'], [data-material='translucent']) {
      background-color: color-mix(in srgb, var(--accent-a4), var(--accent-4) 60%);
      box-shadow: inset 0 0 0 1px var(--accent-a8);
    }
  }
}

/* Disabled state for ALL toggle buttons (pressed and unpressed) */
.rt-BaseButton:where([disabled][aria-pressed]) {
  /* Remove scale transform when disabled */
  transform: none;

  /* Apply consistent disabled styling across all variants */
  color: var(--gray-a8);
  background-color: var(--gray-a3);
  background: var(--gray-a3);
  box-shadow: none;
  filter: none;
  opacity: 0.6;
  cursor: not-allowed;
  pointer-events: none;

  /* Override any pressed state styling with higher specificity */
  &:where([data-state='on']) {
    transform: none;
    background: var(--gray-a3);
    background-color: var(--gray-a3);
    box-shadow: none;
    filter: none;
  }

  /* Override variant-specific pressed states */
  &:where(.rt-variant-classic) {
    background-color: var(--gray-a3);
    box-shadow: none;
    padding-top: 0;
    padding-bottom: 0;
    top: 0;
  }

  &:where(.rt-variant-solid) {
    background-color: var(--gray-a3);
    filter: none;
  }

  &:where(.rt-variant-soft) {
    background-color: var(--gray-a3);
  }

  &:where(.rt-variant-ghost) {
    background-color: var(--gray-a3);
  }

  &:where(.rt-variant-outline) {
    background-color: var(--gray-a3);
    box-shadow: none;
  }

  &:where(.rt-variant-surface) {
    background-color: var(--gray-a3);
    box-shadow: none;
  }
}
